version: '3.8'

services:
  nginx:
    image: nginx:alpine
    container_name: qrfinder-nginx
    ports:
      - "80:80"
    volumes:
      - ./infra/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - webapi
    networks:
      - qrfinder-network

  webapi:
    build:
      context: .
      dockerfile: src/WebApi/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:5001
      - MONGODB_CONNECTION_STRING=mongodb://admin:password123@mongo:27017/qrfinder?authSource=admin
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - AZURE_STORAGE_CONNECTION_STRING=DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;
      - AZURE_STORAGE_BASE_URL=http://localhost:10000
    depends_on:
      - mongo
      - kafka
      - azurite
    networks:
      - qrfinder-network

  analysis-worker:
    build:
      context: .
      dockerfile: src/AnalysisWorker/Dockerfile
    platform: linux/amd64
    container_name: qrfinder-analysis-worker
    environment:
      - MONGODB_CONNECTION_STRING=mongodb://admin:password123@mongo:27017/qrfinder?authSource=admin
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_GROUP_ID=analysis-group
      - AZURE_STORAGE_CONNECTION_STRING=DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;
      - AZURE_STORAGE_BASE_URL=http://azurite:10000
    depends_on:
      - mongo
      - kafka-topics-init
      - azurite
    networks:
      - qrfinder-network

  mongo:
    image: mongo:7.0
    container_name: qrfinder-mongo
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
    volumes:
      - mongo_data:/data/db
    networks:
      - qrfinder-network

  mongo-express:
    image: mongo-express:latest
    container_name: qrfinder-mongo-express
    ports:
      - "5005:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${ME_CONFIG_MONGODB_ADMINUSERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${ME_CONFIG_MONGODB_ADMINPASSWORD}
      - ME_CONFIG_MONGODB_URL=${ME_CONFIG_MONGODB_URL}
      - ME_CONFIG_BASICAUTH_USERNAME=${ME_CONFIG_BASICAUTH_USERNAME}
      - ME_CONFIG_BASICAUTH_PASSWORD=${ME_CONFIG_BASICAUTH_PASSWORD}
    depends_on:
      - mongo
    networks:
      - qrfinder-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: qrfinder-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    networks:
      - qrfinder-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: qrfinder-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_LISTENERS: ${KAFKA_LISTENERS}
      KAFKA_INTER_BROKER_LISTENER_NAME: ${KAFKA_INTER_BROKER_LISTENER_NAME}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: ${KAFKA_AUTO_CREATE_TOPICS_ENABLE}
    depends_on:
      - zookeeper
    networks:
      - qrfinder-network

  kafka-topics-init:
    image: confluentinc/cp-kafka:7.4.0
    container_name: qrfinder-kafka-topics-init
    depends_on:
      - kafka
    command: >
      bash -c "
      echo 'Aguardando Kafka inicializar...'
      sleep 30
      echo 'Criando tópicos...'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic video.analysis.queue --partitions 1 --replication-factor 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic video.progress --partitions 1 --replication-factor 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic videos.results --partitions 1 --replication-factor 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic video.progress.notifications --partitions 1 --replication-factor 1
      echo 'Tópicos criados com sucesso!'
      "
    networks:
      - qrfinder-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: qrfinder-kafka-ui
    ports:
      - "5004:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
    networks:
      - qrfinder-network
        
  azurite:
    image: mcr.microsoft.com/azure-storage/azurite
    container_name: qrfinder-azurite
    ports:
      - "10000:10000"  # Blob service
      - "10001:10001"  # Queue service
      - "10002:10002"  # Table service
    command: "azurite --blobHost 0.0.0.0 --queueHost 0.0.0.0 --tableHost 0.0.0.0 --loose --skipApiVersionCheck"
    volumes:
      - azurite_data:/data
    networks:
      - qrfinder-network

volumes:
  mongo_data:
  azurite_data:

networks:
  qrfinder-network:
    driver: bridge