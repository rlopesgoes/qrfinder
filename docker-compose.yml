version: '3.8'

services:
  nginx:
    image: nginx:alpine
    container_name: qrfinder-nginx
    ports:
      - "80:80"
    volumes:
      - ./infra/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - webapi
    networks:
      - qrfinder-network

  webapi:
    build:
      context: .
      dockerfile: src/WebApi/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ASPNETCORE_URLS=${ASPNETCORE_URLS}
      - MONGODB_CONNECTION_STRING=${MONGODB_CONNECTION_STRING}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
    depends_on:
      - mongo
      - kafka
    networks:
      - qrfinder-network

  worker:
    build:
      context: .
      dockerfile: src/Worker/Dockerfile
    container_name: qrfinder-worker
    environment:
      - MONGODB_CONNECTION_STRING=${MONGODB_CONNECTION_STRING}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - KAFKA_TOPIC=${KAFKA_TOPIC}
      - KAFKA_GROUP_ID=${KAFKA_GROUP_ID}
    depends_on:
      - mongo
      - kafka
    networks:
      - qrfinder-network

  mongo:
    image: mongo:7.0
    container_name: qrfinder-mongo
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
    volumes:
      - mongo_data:/data/db
    networks:
      - qrfinder-network

  mongo-express:
    image: mongo-express:latest
    container_name: qrfinder-mongo-express
    ports:
      - "5005:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${ME_CONFIG_MONGODB_ADMINUSERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${ME_CONFIG_MONGODB_ADMINPASSWORD}
      - ME_CONFIG_MONGODB_URL=${ME_CONFIG_MONGODB_URL}
      - ME_CONFIG_BASICAUTH_USERNAME=${ME_CONFIG_BASICAUTH_USERNAME}
      - ME_CONFIG_BASICAUTH_PASSWORD=${ME_CONFIG_BASICAUTH_PASSWORD}
    depends_on:
      - mongo
    networks:
      - qrfinder-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: qrfinder-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    networks:
      - qrfinder-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: qrfinder-kafka
    ports:
      - "5001:9092"
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_LISTENERS: ${KAFKA_LISTENERS}
      KAFKA_INTER_BROKER_LISTENER_NAME: ${KAFKA_INTER_BROKER_LISTENER_NAME}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: ${KAFKA_AUTO_CREATE_TOPICS_ENABLE}
    depends_on:
      - zookeeper
    networks:
      - qrfinder-network

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: qrfinder-kafdrop
    ports:
      - "5004:9000"
    environment:
      KAFKA_BROKERCONNECT: ${KAFKA_BROKERCONNECT}
      JVM_OPTS: ${JVM_OPTS}
      SERVER_SERVLET_CONTEXTPATH: ${SERVER_SERVLET_CONTEXTPATH}
    depends_on:
      - kafka
    networks:
      - qrfinder-network

volumes:
  mongo_data:

networks:
  qrfinder-network:
    driver: bridge